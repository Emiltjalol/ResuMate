@page "/Personal-letter"
@inject HttpClient Http
@inject CreatePersonalLetterPdfService CreatePersonalLetterPdfService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject IConfiguration Configuration
@attribute [Authorize]


@rendermode InteractiveServer



    
<div class="personal-letter-container">
    @if(isFormVisible)
    {
        <button class="btn btn-primary" @onclick="AutofillForm">Fyll data för testning</button>

        <h1 class="section-title">Personligt brev</h1>

        <!-- Personal Information Section -->
        <div class="personal-info-card">
            <h1>Personuppgifter</h1>
            <div class="form-row">
                <div class="form-group label">
                    <label for="name">Namn</label>
                    <input id="name" @bind="personalLetter.Name" class="form-control" placeholder="För och efternamn" />
                </div>

                <div class="form-group label">
                    <label for="yrkestitel">Din yrkestitel</label>
                    <input id="yrkestitel" @bind="personalLetter.ProfessionalTitle" class="form-control" placeholder="Fyll i din yrkestitel" />
                </div>
                
                <div class="form-group label">
                    <label for="yrkestitel">Tidigare erfarenhet i yrket</label>
                    <select id="yrkestitel" @bind="personalLetter.YearsOfExperience" class="form-control">
                        <option value="">Välj antal år</option>
                        @foreach (var year in experienceOptions)
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>       
            </div>
            
            <div class="form-row">
                <div class="form-group label">
                    <label for="Email">Email</label>
                    <input id="email" @bind="personalLetter.Email" class="form-control" placeholder="Fyll i din email" />
                </div>
                <div class="form-group label">
                    <label for="adress">Adress</label>
                    <input id="adress" @bind="personalLetter.Address" class="form-control" placeholder="Fyll i din adress" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group label">
                    <label for="postnummer">Postnummer</label>
                    <input id="postralcode" @bind="personalLetter.PostalCode" class="form-control" placeholder="Fyll i ditt postnummer" />
                </div>

                <div class="form-group label">
                    <label for="telefon">Telefon</label>
                    <input id="telefon" @bind="personalLetter.PhoneNumber" class="form-control" placeholder="Fyll i ditt telefonnummer" />
                </div>

                <div class="form-group label">
                    <label for="stad">Stad</label>
                    <input id="stad" @bind="personalLetter.City" class="form-control" placeholder="Fyll i din stad" />
                </div>
            </div>
        </div>

        <!-- About Me Section -->
        <div class="section-card">
            <h1>Om dig</h1>
            <div class="form-group label">
                <label for="aboutMe">Berätta kort om dig</label>
                <textarea id="aboutMe" @bind="personalLetter.AboutMe" class="form-control" placeholder="Skriv en liten beskrivning om vem du är."></textarea>
            </div>

            <h3>Har du någon speciell hobby du vill berätta om?</h3>

            <div class="radio-group">
                <div class="radio-option">
                    <input type="radio" id="yes" name="hobbys" @onchange="@(() => hasAnyHobby = true)" checked="@hasAnyHobby" />
                    <label for="yes">Ja</label>
                </div>
                <div class="radio-option">
                    <input type="radio" id="no" name="hobbys" @onchange="@(() => hasAnyHobby = false)" checked="@(!hasAnyHobby)" />
                    <label for="no">Nej</label>
                </div>
            </div>

            @if (hasAnyHobby)
            {
                <div class="form-group label">
                    <label for="personalLetter.hobbies">Beskriv din hobby</label>
                    <textarea id="addHobbys" @bind="personalLetter.Hobbies" class="form-control" placeholder="Beskriv kort om din hobby"></textarea>
                </div>
            }

            <div class="form-group label">
                <label for="careerGoals">Karriärmål</label>
                <textarea id="careerGoals" @bind="personalLetter.CareerGoals" class="form-control" placeholder="Vad är dina karriärsmål?"></textarea>
            </div>

            <div class="form-group label">
                <label for="styrkor">Styrkor</label>
                <textarea id="styrkor" @bind="personalLetter.Strenghts" class="form-control" placeholder="Dina styrkor"></textarea>
            </div>

            <div class="form-group label">
                <label for="svagheter">Svagheter</label>
                <textarea id="svagheter" @bind="personalLetter.Weaknesses" class="form-control" placeholder="Dina svagheter"></textarea>
            </div>
        </div>

        <!-- Company Section -->
        <div class="company-card">
            <h1>Om företaget du söker jobb hos</h1>
            <div class="form-row">
                <div class="form-group label">
                    <label for="firma">Företagsnamn</label>
                    <input id="firma" @bind="personalLetter.CompanyName" class="form-control" placeholder="Ange vilket företag brevet riktar sig till." />
                </div>

                <div class="form-group label">
                    <label for="firma">Vad företaget arbetar med</label>
                    <input id="firma" @bind="personalLetter.BusinessOverview" class="form-control" placeholder="Beskriv kort vad företaget arbetar med." />
                </div>
            </div>

            <div class="form-group label">
                <label for="motivation">Motivation</label>
                <textarea id="motivation" @bind="personalLetter.WhyThisCompany" class="form-control" placeholder="@GetMotivationPlaceholder()"></textarea>
            </div>

            <div class="form-group label">
                <label for="aboutMe">Vad kan du bidra med i detta arbete?</label>
                <textarea id="aboutMe" @bind="personalLetter.YourValueToUs" class="form-control" placeholder="@GetContributionPlaceholder()"></textarea>
            </div>

            <h3>Har du något mer information som du vill lägga till?</h3>

            <div class="radio-group">
                <div class="radio-option">
                    <input type="radio" id="yes" name="extraInfo" @onchange="@(() => hasExtraInfo = true)" checked="@hasExtraInfo" />
                    <label for="yes">Ja</label>
                </div>
                <div class="radio-option">
                    <input type="radio" id="no" name="extraInfo" @onchange="@(() => hasExtraInfo = false)" checked="@(!hasExtraInfo)" />
                    <label for="no">Nej</label>
                </div>
            </div>

            @if (hasExtraInfo)
            {
                <div class="form-group label">
                    <label for="extraDetails">Vad vill du lägga till?</label>
                    <textarea id="extraDetails" @bind="personalLetter.ExtraInfo" class="form-control" placeholder="Skriv mer här..."></textarea>
                </div>
            }
        </div>
         <button class="btn btn-success" @onclick="GenerateLetterAndPdf">Generera brev och PDF</button>
    }
    
</div>



<div class="content-container">
    <div class="letter-container">
        @if (!string.IsNullOrWhiteSpace(generatedLetter))
        {
            <div class="mt-4 p-3 border rounded bg-light">
                <h1>Ditt personliga brev:</h1>
                <p>Här kan du lägga till eller ändra brevet om du vill.</p>
                <p>När du är klar kan du klicka på knappen för att generera en ny PDF av brevet.</p>
                <textarea class="form-control" rows="30" @bind="generatedLetter"></textarea>
                 <button class="btn btn-primary" @onclick="UpdatePdf">Uppdatera PDF efter ändringar</button>
            </div>
        }
    </div>

    <div class="pdf-container">
        @if (!string.IsNullOrWhiteSpace(generatedLetter) && PdfData != null)
        {
            <h1>Din PDF</h1>
            <div class="pdf-viewer-container">
                <iframe class="pdf-viewer" src="@PdfData" style="width:100%; height:900px"></iframe>
                <a class="btn-download" href="@PdfData" download="PersonalLetter.pdf">Download PDF</a>
            </div>

            <div class="mt-3 d-flex flex-wrap gap-2">
               
                <button class="btn btn-secondary" @onclick="ShowFormAgain">Redigera igen</button>
                <button class="btn btn-success" @onclick="SaveGeneratedPdfToDatabase">Spara brevet</button>
            </div>
        }
       
    </div>
</div>



@if (isLoadingLetter)
{
    <div class="overlay-spinner">
        <div class="spinner-border text-light" role="status" style="width: 3rem; height: 3rem;"></div>
        <p class="text-light mt-2">@loadingMessage</p>
    </div>
}








@code {

    private string? PdfData { get; set; }
    private bool hasExtraInfo = false;
    private bool hasAnyHobby = false;
    private bool isLoadingLetter = false;
    private bool isFormVisible = true;
    private byte[]? generatedPdfBytes;
    private string loadingMessage = "";
    private List<string> experienceOptions = new();
    private bool HasGeneratedPdf => generatedPdfBytes != null && generatedPdfBytes.Length > 0;

    string generatedLetter = "";

    protected override async Task OnInitializedAsync()
    {
        await AutofillFromLoggedInUser();

        for (int i = 0; i <= 10; i++)
        {
            if (i == 0)
                experienceOptions.Add("Ingen tidigare erfarenhet");
            else if (i == 10)
                experienceOptions.Add("10+ år");
            else
                experienceOptions.Add($"{i} år");
        }
    }

    private PersonalLetterModel personalLetter = new PersonalLetterModel
        {            
            ProfessionalTitle = "",
            CompanyName = "",
            AboutMe = "",
            Weaknesses = "",
            Strenghts = "",
            CareerGoals = "",
            Hobbies = "",
            BusinessOverview = "",
            ExtraInfo = ""
        };

    private string GetMotivationPlaceholder()
    {
        if (!string.IsNullOrEmpty(personalLetter.CompanyName))
        {
            return $"Varför vill du jobba hos {personalLetter.CompanyName}?";
        }
        return "Varför vill du jobba hos detta företag?";
    }

    private string GetContributionPlaceholder()
    {
        if (!string.IsNullOrEmpty(personalLetter.CompanyName))
        {
            return $"Vad kan du bidra till hos {personalLetter.CompanyName}?";
        }
        return $"Vad kan du bidra till hos detta företag?";
    }

    private async Task GenerateLetterFromApi()
    {
        try
        {

            var apiBaseUrl = Configuration["ApiBaseUrl"];
            var response = await Http.PostAsJsonAsync($"{apiBaseUrl}PersonalLetter", personalLetter);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                generatedLetter = result;
                isFormVisible = false;
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                generatedLetter = $"Något gick fel med API-anropet. Statuskod: {response.StatusCode}. Felmeddelande: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            generatedLetter = $"Ett oväntat fel inträffade: {ex.Message}";
        }
    }

    private async Task GeneratePersonalLetterPdf()
    {
        await Task.Run(() =>
        {
            var document = Document.Create(container =>
            {
                CreatePersonalLetterPdfService.Compose(container, generatedLetter, personalLetter);
            });

            using (var memoryStream = new MemoryStream())
            {
                document.GeneratePdf(memoryStream);
                generatedPdfBytes = memoryStream.ToArray();
                PdfData = $"data:application/pdf;base64,{Convert.ToBase64String(generatedPdfBytes)}";
            }
        });

        isLoadingLetter = false;
        loadingMessage = "";        
    }


    private async Task SetLoadingMessage(string message, int delayMs = 500)
    {
        loadingMessage = message;
        StateHasChanged();
        await Task.Delay(delayMs);
    }

    private async Task GenerateLetterAndPdf()
    {
        isLoadingLetter = true;
        await SetLoadingMessage("Genererar personligt brev...");

        await GenerateLetterFromApi();

        await SetLoadingMessage("Genererar PDF...", 3000);

        await GeneratePersonalLetterPdf();

        isLoadingLetter = false;
        loadingMessage = "";
        StateHasChanged();
    }

    private async Task UpdatePdf()
    {
        isLoadingLetter = true;
        await SetLoadingMessage("Uppdaterar pdf...", 2000);
        await GeneratePersonalLetterPdf();

        isLoadingLetter = false;
        loadingMessage = "";
        StateHasChanged();
    }

    private async Task<string?> GetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.Identity?.IsAuthenticated == true
            ? user.FindFirst(ClaimTypes.NameIdentifier)?.Value
            : null;
    } 

    private async Task SaveGeneratedPdfToDatabase()
    {        
        if (generatedPdfBytes == null || generatedPdfBytes.Length == 0)
        {
            loadingMessage = "Ingen PDF har genererats än!";
            return;
        }

        isLoadingLetter = true;
        await SetLoadingMessage("Sparar personligt brev...", 2000);

        try
        {            
            var userId = await GetCurrentUserIdAsync();
            if (userId == null)
            {
                loadingMessage = "Kunde inte hitta användaren.";
                return;
            }


            var generatedPersonalLetter = new GeneratedPersonalLetter
                {
                    UserId = userId,
                    PersonalLetterData = generatedPdfBytes,
                    FileName = $"Personligt_brev_{personalLetter.CompanyName}.pdf",
                    CreatedAt = DateTime.Now
                };

            await DbContext.GeneratedPersonalLetters.AddAsync(generatedPersonalLetter);
            await DbContext.SaveChangesAsync();

            loadingMessage = "Personligt brev sparat i databasen!";
        }
        catch (Exception ex)        {

            loadingMessage = $"Fel vid sparande: {ex.Message}";
            Console.Error.WriteLine(ex);
        }

        isLoadingLetter = false;
        StateHasChanged();
    }

    private void ShowFormAgain()
    {
        isFormVisible = true;
    }

    private async void AutofillForm()
    {
        personalLetter = new PersonalLetterModel
            {
                Name = "Pelle Andersson",
                Email = "Pelle.andersson@gmail.com",
                PhoneNumber = "0701234567",
                Address = "Gåsvägen 73",
                PostalCode = "12345",
                City = "Stockholm",
                ProfessionalTitle = "Systemutvecklare",
                YearsOfExperience = "5 år",
                AboutMe = "Jag är en driven utvecklare med stort intresse för ny teknik.",
                Hobbies = "Löpning och fotografering",
                CareerGoals = "Att bli en lead developer inom de kommande fem åren.",
                Strenghts = "Problemlösning, lagarbete, kommunikation",
                Weaknesses = "Kan ibland vara för detaljfokuserad",
                CompanyName = "Testbolaget AB",
                BusinessOverview = "De jobbar med digitala lösningar inom e-handel.",
                WhyThisCompany = "För att de har ett gott rykte och jobbar med spännande projekt.",
                YourValueToUs = "Jag kan bidra med struktur, effektivitet och nytänkande.",
                ExtraInfo = "Jag har också erfarenhet av projektledning."
            };

        hasAnyHobby = true;
        hasExtraInfo = true;

        await GenerateLetterAndPdf();
    }

  
    private async Task AutofillFromLoggedInUser()  
    {  
        try  
        {  
            var userId = await GetCurrentUserIdAsync();  
            if (userId == null)  
            {  
                loadingMessage = "Kunde inte hitta användaren.";  
                return;  
            }  
               
            var user = await DbContext.Users.FindAsync(userId);  
            if (user != null)  
            {  
                personalLetter.Name = user.FirstName + " " + user.LastName;  
                personalLetter.Email = user.Email;  
                personalLetter.Address = user.Address;  
                personalLetter.PostalCode = user.PostalCode;  
                personalLetter.City = user.County;  
                personalLetter.PhoneNumber = user.PhoneNumber;  
            }  
            else  
            {  
                loadingMessage = "Kunde inte hämta användaruppgifter.";  
            }  
        }  
        catch (Exception ex)  
        {  
            loadingMessage = $"Ett fel inträffade: {ex.Message}";  
        }  
    }  
    

}