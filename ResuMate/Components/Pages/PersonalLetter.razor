@page "/Personal-letter"
@inject HttpClient Http
@using QuestPDF.Fluent
@using ResuMate.Components.Models
@using ResuMate.Services
@rendermode InteractiveServer

<h1 class="section-title">Här kan du med hjälp av AI skriva ett personligt brev riktat till ditt arbete</h1>
<h1 class="section-title">Personligt brev detaljer</h1>


<div class="form-group label">
    <label for="name">Namn</label>
    <input id="name" @bind="personalLetter.Name" class="form-control" placeholder="Ditt namn" />
</div>

<div class="form-group label">
    <label for="yrkestitel">Din yrkestitel</label>
    <input id="yrkestitel" @bind="personalLetter.ProfessionalTitle" class="form-control" placeholder="Fyll i din yrkestitel" />
</div>

<div class="form-group label">
    <label for="firma">Företagsnamn</label>
    <input id="firma" @bind="personalLetter.CompanyName" class="form-control" placeholder="Företag du söker jobb hos" />
</div>

<div class="form-group label">
    <label for="firma">Vad företaget arbetar med</label>
    <input id="firma" @bind="personalLetter.BusinessOverview" class="form-control" placeholder="Beskriv kort vad företaget arbetar med" />
</div>

<div class="form-group label">
    <label for="aboutMe">Kort om mig</label>
    <textarea id="aboutMe" @bind="personalLetter.AboutMe" class="form-control" placeholder="Skriv kort om dig själv"></textarea>
</div>

<div class="form-group label">
    <label for="motivation">Motivation</label>
    <textarea id="motivation" @bind="personalLetter.Motivation"class="form-control" placeholder="@GetMotivationPlaceholder()"></textarea>
</div>

<div class="form-group label">
    <label for="hobbies">Hobbies</label>
    <textarea id="hobbies" @bind="personalLetter.Hobbies" class="form-control" placeholder="Dina hobbies"></textarea>
</div>

<div class="form-group label">
    <label for="careerGoals">Kareergoals</label>
    <textarea id="careerGoals" @bind="personalLetter.CareerGoals" class="form-control" placeholder="Dina kareergoals"></textarea>
</div>

<div class="form-group label">
    <label for="styrkor">Styrkor</label>
    <textarea id="styrkor" @bind="personalLetter.Strenghts" class="form-control" placeholder="Dina styrkor"></textarea>
</div>

<div class="form-group label">
    <label for="svagheter">Svagheter</label>
    <textarea id="svagheter" @bind="personalLetter.Weaknesses" class="form-control" placeholder="Dina svagheter"></textarea>
</div>

<h3>Har du något mer som du tror är viktigt att tillägga?</h3>

<div>
    <input type="radio" id="yes" name="extraInfo" @onchange="@(() => hasExtraInfo = true)" checked="@hasExtraInfo" />
    <label for="yes">Ja</label>

    <input type="radio" id="no" name="extraInfo" @onchange="@(() => hasExtraInfo = false)" checked="@(!hasExtraInfo)" />
    <label for="no">Nej</label>
</div>

@if (hasExtraInfo)
{
    <div class="form-group label">
        <label for="extraDetails">Vad vill du lägga till?</label>
        <textarea id="extraDetails" @bind="personalLetter.ExtraInfo" class="form-control" placeholder="Skriv mer här..."></textarea>
    </div>
}


<button class="btn btn-success mt-3" @onclick="GenerateLetter">Generera brev</button>
<button class="btn btn-success mt-3" @onclick="GenerateLetterFromApi">Generera brev via API anrop</button>


@if (!string.IsNullOrWhiteSpace(generatedLetter))
{
     <div class="mt-4 p-3 border rounded bg-light">
        <h3>Ditt personliga brev:</h3>
        <pre>@generatedLetter</pre>
    </div>
}



@code {

    // private List<ReferenceModel> referenceList = new List<ReferenceModel>();
    // private List<EducationModel> educationList = new List<EducationModel>();
    // private List<ExperienceModel> experienceList = new List<ExperienceModel>();
    // private PersonalLetterModel personalLetter = new PersonalLetterModel();


    private bool hasExtraInfo = false;
    
    private string generatedLetter = "";

    private void GenerateLetter()
    {
        var extra = hasExtraInfo ? $"Tilläggsinformation: {personalLetter.ExtraInfo}" : "";

        generatedLetter = $@"
            Hej {personalLetter.CompanyName},

            Jag heter {personalLetter.Name} och arbetar som {personalLetter.ProfessionalTitle}.
            Jag är intresserad av att arbeta hos er eftersom {personalLetter.Motivation}.

            Jag har tidigare erfarenhet inom området och är särskilt stark på {personalLetter.Strenghts},
            men jag är medveten om mina svagheter såsom {personalLetter.Weaknesses}, vilket jag aktivt arbetar med.

            På fritiden tycker jag om att: {personalLetter.Hobbies}

            Mitt mål är att {personalLetter.CareerGoals}.

            Lite om företaget: {personalLetter.BusinessOverview}

            {personalLetter.ExtraInfo}

            Med vänliga hälsningar,
            {personalLetter.Name}
            ";
    }

    private async Task GenerateLetterFromApi()
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7068/api/PersonalLetter", personalLetter);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadAsStringAsync();
            generatedLetter = result;
        }
        else
        {            
            var errorMessage = await response.Content.ReadAsStringAsync();            
            generatedLetter = $"Något gick fel med API-anropet. Statuskod: {response.StatusCode}. Felmeddelande: {errorMessage}";
        }
    }


    private PersonalLetterModel personalLetter = new PersonalLetterModel
    {
            Name = "Emil",
            ProfessionalTitle = "Systemutvecklare inom .NET",
            CompanyName = "Microsoft",
            AboutMe = "Jag är en glad snäll kille med 2 barn på 3 och 6 år, jag arbetar med .NET som systemutvecklare.",
            Weaknesses = "",
            Strenghts = "Jag vill alltid lära mig mer, är en bra lagspelare",
            CareerGoals = "",
            Hobbies ="Spela tv-spel, dator-spel, kolla film och serier",            
            Motivation = "Att ständigt utvecklas och lära mig mer saker.",
            BusinessOverview = "",
            ExtraInfo = ""
    };

    private string GetMotivationPlaceholder()
    {       
        if (!string.IsNullOrEmpty(personalLetter.CompanyName))
        {
            return $"Varför vill du jobba hos {personalLetter.CompanyName}?";
        }        
        return "Varför vill du jobba hos detta företag?";
    }
}
