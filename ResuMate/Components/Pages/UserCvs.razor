@page "/user-cvs"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Services.CvServices.GetCvService CvService
@inject Services.CvServices.DeleteCvService DeleteCvService
@rendermode InteractiveServer



<h3 class="section-title">Dina CV:n</h3>

@if (generatedCvs == null)
{
    <p>Läser in dina CV:n...</p>
}
else if (generatedCvs.Count == 0)
{
    <p>Du har inte genererat några CV:n än.</p>
}
else
{
    <div class="cv-thumbnails">
        @foreach (var cv in generatedCvs)
        {
            <div class="cv-thumbnail-card">
                <p>@cv.FileName.Substring(0, Math.Min(15, cv.FileName.Length))...</p>


                @if (!string.IsNullOrEmpty(cv.Base64CvData))
                {
                    <iframe src="data:application/pdf;base64,@cv.Base64CvData" style="width: 100%; height: 450px; border: none;" />
                }
                else
                {
                    <p>Ingen förhandsvisning tillgänglig</p>
                }

                <button class="btn btn-danger" @onclick="() => DeleteCv(cv)">Ta bort</button>                

            </div>
        }
    </div>
}


@code {
    private List<GeneratedCv> generatedCvs;       

    protected override async Task OnInitializedAsync()
    {
        var userId = await GetCurrentUserIdAsync();
        if (userId != null)
        {
            generatedCvs = await CvService.GetUserGeneratedCvsAsync(userId);
        }
    }

    private async Task DeleteCv(GeneratedCv cv)
    {
        var userId = await GetCurrentUserIdAsync();
        if (userId != null)
        {
            var success = await DeleteCvService.DeleteCvAsync(cv.Id, userId);
        }
    }



    private async Task<string?> GetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.Identity?.IsAuthenticated == true
            ? user.FindFirst(ClaimTypes.NameIdentifier)?.Value
            : null;
    }
}