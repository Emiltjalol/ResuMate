@page "/user-cvs"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject CreateCvPdfService CreateCvPdfService
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using ResuMate.Data
@using ResuMate.Services
@using ResuMate.Shared.Models

<h3 class="section-title">Dina CV:n</h3>

@if (generatedCvs == null)
{
    <p>Läser in dina CV:n...</p>
}
else if (generatedCvs.Count == 0)
{
    <p>Du har inte genererat några CV:n än.</p>
}
else
{
    <div class="cv-thumbnails">
        @foreach (var cv in generatedCvs)
        {
            <div class="cv-thumbnail-card">
                <p>@cv.FileName</p>

                @if (!string.IsNullOrEmpty(cv.Base64CvData))
                {
                    <iframe src="data:application/pdf;base64,@cv.Base64CvData" style="width: 100%; height: 450px; border: none;" />
                }
                else
                {
                    <p>Ingen förhandsvisning tillgänglig</p>
                }               
            </div>
        }
    </div>
}

@code {
    private List<GeneratedCv> generatedCvs;

    private async Task<List<GeneratedCv>> GetUserGeneratedCvs()
    {
        var userId = await GetCurrentUserIdAsync();
        if (userId != null)
        {
            var generatedCvs = await DbContext.GeneratedCvs
                .Where(c => c.UserId == userId)
                .OrderByDescending(c => c.CreatedAt)
                .ToListAsync();

            foreach (var cv in generatedCvs)
            {
                if (cv.CvData != null)
                {
                    cv.Base64CvData = Convert.ToBase64String(cv.CvData);
                }
            }

            return generatedCvs;
        }

        return new List<GeneratedCv>();
    }

    protected override async Task OnInitializedAsync()
    {
        generatedCvs = await GetUserGeneratedCvs();
    }

    private async Task<string?> GetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.Identity?.IsAuthenticated == true
            ? user.FindFirst(ClaimTypes.NameIdentifier)?.Value
            : null;
    }
}