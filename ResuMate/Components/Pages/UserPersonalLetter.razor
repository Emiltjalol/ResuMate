@page "/user-personal-letters"
@using ResuMate.Services.PersonalLetterServices
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Services.PersonalLetterServices.GetPersonalLetterService getPersonalLetterService
@inject ResuMate.Services.PersonalLetterServices.DeletePersonalLetterService DeleteLetterService
@rendermode InteractiveServer



<h3 class="section-title">Dina personliga brev</h3>

@if(generatedPersonalLetters == null)
{
    <p>Läser in dina personliga brev...</p>
}
else if (generatedPersonalLetters.Count == 0)
{
    <p>Du har inga sparade personliga brev</p>
}
else
{
    <div class="cv-thumbnails">
        @foreach (var letter in generatedPersonalLetters)
        {
            <div class="cv-thumbnail-card">
                <p>@letter.FileName</p>


                @if (!string.IsNullOrEmpty(letter.Base64CvData))
                {
                    <iframe src="data:application/pdf;base64,@letter.Base64CvData" style="width: 100%; height: 450px; border: none;" />
                }
                else
                {
                    <p>Ingen förhandsvisning tillgänglig</p>
                }
                <button class="btn btn-danger" @onclick="() => DeleteLetter(letter)">Ta bort</button>
            </div>
            
        }
    </div>
}

@code {
    private List<GeneratedPersonalLetter> generatedPersonalLetters;

    protected override async Task OnInitializedAsync()
    {
        var userId = await GetCurrentUserIdAsync();
        if (userId != null)
        {
            generatedPersonalLetters = await getPersonalLetterService.GetUserPersonalLettersAsync(userId);
        }
    }

    private async Task DeleteLetter(GeneratedPersonalLetter letter)
    {
        var userId = await GetCurrentUserIdAsync();
        if (userId != null)
        {
            var success = await DeleteLetterService.DeleteLetterAsync(letter.Id, userId);

        }
    }

    private async Task<string?> GetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.Identity?.IsAuthenticated == true
            ? user.FindFirst(ClaimTypes.NameIdentifier)?.Value
            : null;
    }
}
