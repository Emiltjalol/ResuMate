@page "/"
@using QuestPDF.Fluent
@using ResuMate.Services
@using ResuMate.Components.Models
@rendermode InteractiveServer
@inject CreatePdfService CreatePdfService

<h3 class="section-title">Fyll i dina uppgifter</h3>

<h3 class="section-title">CV detaljer</h3>

<div class="form-group label">
    <label for="name">Namn</label>
    <input id="name" @bind="cv.Name" class="form-control" placeholder="Ditt namn" />
</div>

<div class="form-group label">
    <label for="yrkestitel">ProfessionalTitle</label>
    <input id="yrkestitel" @bind="cv.ProfessionalTitle" class="form-control" placeholder="Din yrkestitel" />
</div>

<div class="form-group label">
    <label for="email">Email</label>
    <input id="email" @bind="cv.Email" class="form-control" placeholder="Din e-postadress" />
</div>

<div class="form-group d-flex gap-2">
    <div class="form-group label" style="flex: 2;">
        <label for="address">Address</label>
        <input id="address" @bind="cv.Address" class="form-control" placeholder="Din adress" />
    </div>
    <div class="form-group label" style="flex: 1;">
        <label for="postalcode">Postkod</label>
        <input id="postalcode" @bind="cv.PostalCode" class="form-control" placeholder="Postkod" />
    </div>
    <div class="form-group label" style="flex: 1;">
        <label for="city">Stad</label>
        <input id="city" @bind="cv.City" class="form-control" placeholder="Stad" />
    </div>
</div>

<div class="form-group label">
    <label for="phone">Telefonnummer</label>
    <input id="phone" @bind="cv.PhoneNumber" class="form-control" placeholder="Telefonnummer" />
</div>

<div class="form-group label">
    <label for="aboutMe">Kort om mig</label>
    <textarea id="aboutMe" @bind="cv.AboutMe" class="form-control" placeholder="Skriv kort om dig själv"></textarea>
</div>

<div class="form-group label">
    <label for="languages">Språk</label>
    <input id="languages" @bind="cv.Languages" class="form-control" placeholder="Språk du talar" />
</div>

<hr class="section-divider">

<h3 class="section-title">Utbildningar</h3>
<p>Ange dina senaste utbildningar (Max tre)</p>
@foreach (var edu in educationList)
{
    <div class="education-card">
        <h4>Utbildning @(@educationList.IndexOf(edu) + 1)</h4>
        <div class="form-group d-flex gap-2">
            <div class="form-group label">
                <label for="school">Skola</label>
                <input id="school" @bind="edu.School" class="form-control" placeholder="Skolans namn" />
            </div>

            <div class="form-group label">
                <label for="specialization">Inriktning</label>
                <input id="specialization" @bind="edu.Specialization" class="form-control" placeholder="Inriktning" />
            </div>
        </div>
        <div class="form-group label">
            <label for="degree">Examen</label>
            <input id="degree" @bind="edu.Degree" class="form-control" placeholder="Examen" />
        </div>

        <div class="form-group d-flex gap-3 label">
            <div>
                <label for="startYear">Startår</label>
                <input id="startYear" type="number" @bind="edu.StartYear" class="form-control" placeholder="Startår" />
            </div>
            <div>
                <label for="endYear">Slutår</label>
                <input id="endYear" type="number" @bind="edu.EndYear" class="form-control" placeholder="Slutår" />
            </div>
        </div>

        <button class="btn btn-danger" @onclick="() => RemoveEducation(edu)">Ta bort utbildning</button>
    </div>
}

@if (educationList.Count < 3)
{
    <button class="btn btn-secondary" @onclick="AddEducation">Lägg till utbildning</button>
}

<hr class="section-divider">

<h3 class="section-title">Arbetslivserfarenhet</h3>
<p>Ange dinasenaste arbetslivserfarenheter (Max tre)</p>

@foreach (var job in experienceList)
{
    <div class="job-card">
        <h4>Jobb @(@experienceList.IndexOf(job) + 1)</h4>
        <div class="form-group d-flex gap-2">
            <div class="form-group label">
                <label for="jobTitle">Jobbtitel</label>
                <input id="jobTitle" @bind="job.JobTitle" class="form-control" placeholder="Jobbtitel" />
            </div>

            <div class="form-group label">
                <label for="company">Företag</label>
                <input id="company" @bind="job.Company" class="form-control" placeholder="Företag" />
            </div>
        </div>
        <div class="form-group label">
            <label for="jobDescription">Beskrivning av arbetsuppgifter</label>
            <textarea id="jobDescription" @bind="job.JobDescription" class="form-control" placeholder="Beskriv arbetsuppgifterna"></textarea>
        </div>

        <div class="form-group d-flex gap-3 label">
            <div>
                <label for="jobStartYear">Startår</label>
                <input id="jobStartYear" type="number" @bind="job.StartYear" class="form-control" placeholder="Startår" />
            </div>
            <div>
                <label for="jobEndYear">Slutår</label>
                <input id="jobEndYear" type="number" @bind="job.EndYear" class="form-control" placeholder="Slutår" />
            </div>
        </div>

        <button class="btn btn-danger" @onclick="() => RemoveJobExperience(job)">Ta bort arbetslivserfarenhet</button>
    </div>
}

@if (experienceList.Count < 3)
{
    <button class="btn btn-secondary" @onclick="AddExperience">Lägg till ny erfarenhet</button>
}

<hr class="section-divider">

<h3 class="section-title">Referenser</h3>
<p>Ange dina referenser (Max tre)</p>

@foreach (var reference in referenceList)
{
    <div class="reference-card">
        <h4>Referens @(@referenceList.IndexOf(reference) + 1)</h4>

        <div class="form-group d-flex gap-3 label">
            <div class="flex-fill">
                <label for="referenceName">Namn</label>
                <input id="referenceName" @bind="reference.Name" class="form-control" placeholder="Referensens namn" />
            </div>
            <div class="flex-fill">
                <label for="referenceRelation">Relation</label>
                <input id="referenceRelation" @bind="reference.Relation" class="form-control" placeholder="Relation till referens" />
            </div>
            <div class="flex-fill">
                <label for="referencePhone">Telefonnummer</label>
                <input id="referencePhone" @bind="reference.PhoneNumber" class="form-control" placeholder="Telefonnummer" />
            </div>
        </div>

        <button class="btn btn-danger mt-2" @onclick="() => RemoveReference(reference)">Ta bort referens</button>
    </div>
}

@if (referenceList.Count < 3)
{
    <button class="btn btn-secondary" @onclick="AddReference">Lägg till ny referens</button>
}

<hr class="section-divider">

<h3 class="section-title">Övrigt</h3>

<div class="form-group label">
    <label for="newSkill">Här kan du lägga till andra kompetenser eller meriterande egenskaper</label>
    <input id="newSkill" @bind="newSkill" class="form-control" placeholder="Kompetens eller merit" />
</div>

<button class="btn btn-secondary" @onclick="AddSkill">Lägg till</button>

<div class="skills-container">
    @foreach (var skill in cv.Skills)
    {
        <div class="skill-card">
            <span class="skill-name">@skill</span>
            <button class="btn-remove" @onclick="() => RemoveSkill(skill)">Ta bort</button>
        </div>
    }
</div>



@if (PdfData != null)
{
    <div class="pdf-container">
        <iframe class="pdf-viewer" src="@PdfData" width="100%" height="600px"></iframe>
        <a class="btn-download" href="@PdfData" download="Resume.pdf">Download PDF</a>
    </div>
}

<button class="btn btn-primary btn-generate" @onclick="GeneratePdf">Generera CV</button>


@code {
    private string? PdfData { get; set; }
    private List<ReferenceModel> referenceList = new List<ReferenceModel>();
    private List<EducationModel> educationList = new List<EducationModel>();
    private List<ExperienceModel> experienceList = new List<ExperienceModel>();

    private string newSkill = "";

    private CvModel cv = new CvModel
        {           
            Name = "Johan Andersson",
            ProfessionalTitle = "Fullstackutvecklare",
            Email = "Johan.andersson@hotmail.com",
            Address = "Tallvägen 12",
            PostalCode = "12345",
            City = "Stockholm",
            PhoneNumber = "070-1234567",
            AboutMe = "Jag är en driven och lösningsorienterad utvecklare med erfarenhet inom både frontend och backend. Jag älskar att skapa moderna, responsiva webbapplikationer och automatisera processer för att förbättra arbetsflöden.",
            Languages = "Svenska, engelska, tyska",         
            Skills = new List<string>
        {
            "C#, .NET Core, ASP.NET",
            "JavaScript, TypeScript, React, Angular",
            "SQL, PostgreSQL, MongoDB",
            "Azure DevOps, Docker, Kubernetes",
            "Microservices & REST API-design",
            "CI/CD, Jenkins, GitHub Actions",
            "Testdriven utveckling (TDD), enhetstester & integrationstester"
        }};  


    private void AddReference()
    {
        if (referenceList.Count < 3)
        {
            referenceList.Add(new ReferenceModel
                {
                    Name = "",
                    Relation = "",
                    PhoneNumber = ""
                });
        }
    }

    private void RemoveReference(ReferenceModel reference)
    {        
            referenceList.Remove(reference);       
    }
    private void AddSkill()
    {
        if (!string.IsNullOrWhiteSpace(newSkill) && !cv.Skills.Contains(newSkill))
        {
            cv.Skills.Add(newSkill);
            newSkill = "";
        }
    }

    private void RemoveSkill(string skill)
    {
        if (cv.Skills != null)
        {
            cv.Skills.Remove(skill);
        }        
    }

    private void AddExperience()
    {
        if (experienceList.Count < 3)
        {
            experienceList.Add(new ExperienceModel
            {
                // JobTitle = "",
                // Company = "",
                // JobDescription = "",
                // StartYear = null,
                // EndYear = null

                //För att fylla på med random fakta till för testning
                    JobTitle = "Fullstackutvecklare",
                    Company = "Digital Solutions AB",
                    JobDescription = "Utvecklade och underhöll webbapplikationer i .NET och React, samt implementerade CI/CD-pipelines för automatiserad deployment.",
                    StartYear = "2019",
                    EndYear = "2022"
            });         

            experienceList.Add(new ExperienceModel
                {
                    JobTitle = "Systemutvecklare .NET",
                    Company = "Tech Solutions AB",
                    JobDescription = "Utvecklade och underhöll webbaserade applikationer i .NET och React.",
                    StartYear = "2021",
                    EndYear = "2023"
                });

            experienceList.Add(new ExperienceModel
                {
                    JobTitle = "Junior Systemutvecklare",
                    Company = "Innovate IT",
                    JobDescription = "Arbetade med backend-utveckling och databashantering i SQL Server och Entity Framework.",
                    StartYear = "2018",
                    EndYear = "2021"
                });

            referenceList.Add(new ReferenceModel
            {
                Name = "Gunilla Persson",
                Relation = "Tidigare kollega",
                PhoneNumber = "0798459283"
            });
            referenceList.Add(new ReferenceModel
                {
                    Name = "Tommy Tran",
                    Relation = "Framtida kollega och partner på Tommy och Emil AB",
                    PhoneNumber = "0798459283"
                });
        }
    }
    
    private void AddEducation()
    {
        if (educationList.Count < 3)
        {
            educationList.Add(new EducationModel
            {
                    // School = "",
                    // Degree = "",
                    // Specialization = "",
                    // StartYear = null,
                    // EndYear = null

                //För att fylla på med random fakta till för testning
                    School = "KTH - Kungliga Tekniska Högskolan",
                    Degree = "Civilingenjör i Datateknik",
                    Specialization = "Mjukvaruutveckling & AI",
                    StartYear = "2023",
                    EndYear = "2025"
            });
            educationList.Add(new EducationModel
                {
                    School = "Linnéuniversitetet",
                    Degree = "Kandidatexamen i Datavetenskap",
                    Specialization = "Programvaruteknik",
                    StartYear = "2022",
                    EndYear = "2023"
                });

            educationList.Add(new EducationModel
                {
                    School = "Chalmers Tekniska Högskola",
                    Degree = "Masterexamen i Programvaruutveckling",
                    Specialization = "AI och maskininlärning",
                    StartYear = "2021",
                    EndYear = "2022"
                });
        }
    }

    private void RemoveEducation(EducationModel education)
    {
        educationList.Remove(education);
    }

    private void RemoveJobExperience(ExperienceModel experiences)
    {
        experienceList.Remove(experiences);
    }

    
    private async Task GeneratePdf()
    {
        var document = Document.Create(container =>
           {
            CreatePdfService.Template1(container, cv, educationList, experienceList, referenceList);
              // CreatePdfService.Template2(container, cv, educationList, experienceList, referenceList);
            CreatePdfService.Template3(container, cv, educationList, experienceList, referenceList);
             CreatePdfService.Template4(container, cv, educationList, experienceList, referenceList);
             CreatePdfService.Template5(container, cv, educationList, experienceList, referenceList);
                 CreatePdfService.Template6(container, cv, educationList, experienceList, referenceList);
               CreatePdfService.Template7(container, cv, educationList, experienceList, referenceList);
               //CreatePdfService.Template8(container, cv, educationList, experienceList, referenceList);
               // CreatePdfService.Template9(container, cv, educationList, experienceList, referenceList);
               // CreatePdfService.Template10(container, cv, educationList, experienceList, referenceList);
        });
        
        using (var memoryStream = new MemoryStream())
        {
            document.GeneratePdf(memoryStream);
            var pdfBytes = memoryStream.ToArray();
            PdfData = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";
        }
    }

}


