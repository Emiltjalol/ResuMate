@page "/cvform"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject ApplicationDbContext DbContext
@inject CreateCvPdfService CreateCvPdfService
@inject NavigationManager NavigationManager
@attribute [Authorize]
@rendermode InteractiveServer

<div class="page-header">
    <h1>CV Skaparen</h1>
    <div class="floating-element floating-element-1"></div>
    <div class="floating-element floating-element-2"></div>
    <div class="floating-element floating-element-3"></div>
    <div class="floating-element floating-element-4"></div>
    <div class="floating-element floating-element-5"></div>
</div>

<div class="cv-form-container">
    <div class="content-wrapper">
        <h3 class="section-title">Fyll i dina uppgifter</h3>
        <button class="btn btn-secondary" @onclick="AddTestData">Lägg till Testdata</button>
        <button class="btn btn-primary btn-generate" @onclick="GenerateCvPdf">Generera CV</button>

        <!-- Personuppgifter -->
        <div class="personal-info-card">
            <h1>Personuppgifter</h1>
            <div class="form-group d-flex gap-2">
                <div class="form-group label flex-fill">
                    <label for="name">Namn</label>
                    <input id="name" @bind="cv.Name" class="form-control" placeholder="Ditt namn" />
                </div>
                <div class="form-group label flex-fill">
                    <label for="yrkestitel">Yrkestitel</label>
                    <input id="yrkestitel" @bind="cv.ProfessionalTitle" class="form-control" placeholder="Din yrkestitel" />
                </div>
            </div>
            <div class="form-group label">
                <label for="email">Email</label>
                <input id="email" @bind="cv.Email" class="form-control" placeholder="Din e-postadress" />
            </div>
            <div class="form-group d-flex gap-2">
                <div class="form-group label flex-fill">
                    <label for="address">Adress</label>
                    <input id="address" @bind="cv.Address" class="form-control" placeholder="Din adress" />
                </div>
                <div class="form-group label" style="flex:1;">
                    <label for="postalcode">Postkod</label>
                    <input id="postalcode" @bind="cv.PostalCode" class="form-control" placeholder="Postkod" />
                </div>
                <div class="form-group label" style="flex:1;">
                    <label for="city">Stad</label>
                    <input id="city" @bind="cv.City" class="form-control" placeholder="Stad" />
                </div>
            </div>
            <div class="form-group label">
                <label for="phone">Telefonnummer</label>
                <input id="phone" @bind="cv.PhoneNumber" class="form-control" placeholder="Telefonnummer" />
            </div>
            @if (DoesTemplateSupportProfileImage(selectedTemplate))
            {
                <div class="form-group label">
                    <label>Profilbild</label>
                    <div>
                        <input type="radio" id="yes" name="uploadImage" @onchange="@(() => UserUploadedImage = true)" checked="@UserUploadedImage" />
                        <label for="yes">Ja</label>
                        <input type="radio" id="no" name="UploadImage" @onchange="@(() => UserUploadedImage = false)" checked="@(!UserUploadedImage)" />
                        <label for="no">Nej</label>
                    </div>
                    @if (UserUploadedImage)
                    {
                        <InputFile OnChange="HandleImageUpload" />
                        @if (!string.IsNullOrEmpty(cv.ProfileImage))
                        {
                            <img src="@cv.ProfileImage" alt="Profilbild" style="max-width: 150px; max-height: 150px; margin-top: 10px;" />
                            <br />
                            <button class="btn btn-danger" @onclick="RemoveProfileImage">Ta bort bild</button>
                        }
                    }
                </div>
            }
        </div>

        <!-- Om mig -->
        <div class="section-card">
            <h1>Om dig</h1>
            <div class="form-group label">
                <label for="aboutMe">Kort beskrivning av dig</label>
                <textarea id="aboutMe" @bind="cv.AboutMe" class="form-control" placeholder="Berätta något om dig själv, tänk på att du senare ska sälja in dig själv via ditt personliga brev så detta ska bara vara något kort som får dig att sticka ut."></textarea>
            </div>
        </div>

        <hr class="section-divider">

        <!-- Utbildningar -->
        <h3 class="section-title">Utbildningar</h3>
        <p>Ange dina senaste utbildningar (Max tre)</p>
        @foreach (var edu in educationList)
        {
            <div class="education-card mb-3">
                <h4>Utbildning @(@educationList.IndexOf(edu) + 1)</h4>
                <div class="form-group d-flex gap-2">
                    <div class="form-group label flex-fill">
                        <label for="school">Skola</label>
                        <input id="school" @bind="edu.School" class="form-control" placeholder="Skolans namn" />
                    </div>
                    <div class="form-group label flex-fill">
                        <label for="specialization">Inriktning</label>
                        <input id="specialization" @bind="edu.Specialization" class="form-control" placeholder="Inriktning" />
                    </div>
                </div>
                <div class="form-group d-flex gap-3 align-items-end">
                    <div class="flex-grow-2" style="flex: 2;">
                        <label for="degree">Examen</label>
                        <input id="degree" @bind="edu.Degree" class="form-control" placeholder="Examen" />
                    </div>
                    <div style="flex:0.5;">
                        <label for="startYear">Startår</label>
                        <input id="startYear" type="number" @bind="edu.StartYear" class="form-control" placeholder="Startår" />
                    </div>
                    <div style="flex:0.5;">
                        <label for="endYear">Slutår</label>
                        <input id="endYear" type="number" @bind="edu.EndYear" class="form-control" placeholder="Slutår" />
                    </div>
                </div><div>
                    <button class="btn btn-danger mt-2" @onclick="() => RemoveEducation(edu)">Ta bort</button>
                </div>
            </div>
        }
        @if (educationList.Count < 3)
        {
            <button class="btn btn-secondary" @onclick="AddEducation">Lägg till utbildning</button>
        }
        <hr class="section-divider">

        <!-- Arbetslivserfarenhet -->
        <h3 class="section-title">Arbetslivserfarenhet</h3>
        <p>Ange dina senaste arbetslivserfarenheter (Max tre)</p>
        @foreach (var job in experienceList)
        {
            <div class="job-card mb-3">
                <h4>Jobb @(@experienceList.IndexOf(job) + 1)</h4>
                <div class="form-group d-flex gap-2">
                    <div class="form-group label flex-fill">
                        <label for="jobTitle">Jobbtitel</label>
                        <input id="jobTitle" @bind="job.JobTitle" class="form-control" placeholder="Jobbtitel" />
                    </div>
                    <div class="form-group label flex-fill">
                        <label for="company">Företag</label>
                        <input id="company" @bind="job.Company" class="form-control" placeholder="Företag" />
                    </div>
                </div>
                <div class="form-group label">
                    <label for="jobDescription">Beskrivning av arbetsuppgifter</label>
                    <textarea id="jobDescription" @bind="job.JobDescription" class="form-control" placeholder="Beskriv arbetsuppgifterna"></textarea>
                </div>
                <div class="form-group d-flex gap-3 align-items-end">
                    <div class="form-group label mb-0">
                        <label for="jobStartYear">Startår</label>
                        <input id="jobStartYear" type="number" @bind="job.StartYear" class="form-control" placeholder="Startår" />
                    </div>
                    <div class="form-group label mb-0">
                        <label for="jobEndYear">Slutår</label>
                        <input id="jobEndYear" type="number" @bind="job.EndYear" class="form-control" placeholder="Slutår" />
                    </div>
                    <button class="btn btn-danger mt-2" @onclick="() => RemoveJobExperience(job)">Ta bort</button>
                </div>
            </div>
        }
        @if (experienceList.Count < 3)
        {
            <button class="btn btn-secondary" @onclick="AddExperience">Lägg till ny erfarenhet</button>
        }

        <hr class="section-divider">

        <!-- Referenser -->
        <h3 class="section-title">Referenser</h3>
        <p>Ange dina referenser (Max tre)</p>
        @foreach (var reference in referenceList)
        {
            <div class="reference-card mb-3">
                <h4>Referens @(@referenceList.IndexOf(reference) + 1)</h4>
                <div class="form-group d-flex gap-3 align-items-end">
                    <div class="form-group label flex-fill mb-0">
                        <label for="referenceName">Namn</label>
                        <input id="referenceName" @bind="reference.Name" class="form-control" placeholder="Referensens namn" />
                    </div>
                    <div class="form-group label flex-fill mb-0">
                        <label for="referenceRelation">Relation</label>
                        <input id="referenceRelation" @bind="reference.Relation" class="form-control" placeholder="Relation till referens" />
                    </div>
                    <div class="form-group label flex-fill mb-0">
                        <label for="referencePhone">Telefonnummer</label>
                        <input id="referencePhone" @bind="reference.PhoneNumber" class="form-control" placeholder="Telefonnummer" />
                    </div>
                    <button class="btn btn-danger mt-2" @onclick="() => RemoveReference(reference)">Ta bort</button>
                </div>
            </div>
        }
        @if (referenceList.Count < 3)
        {
            <button class="btn btn-secondary" @onclick="AddReference">Lägg till ny referens</button>
        }

        <hr class="section-divider">

        <!-- Övrigt -->
        <div class="card mb-4 p-4">
            <h4 class="mb-3"> Övriga kompetenser</h4>
            <div class="form-group label">
                <label for="newSkill">Här kan du lägga till andra kompetenser eller meriterande egenskaper</label>
                <input id="newSkill" @bind="newSkill" class="form-control" placeholder="Kompetens eller merit" />
            </div>
            <button class="btn btn-secondary" @onclick="AddSkill">Lägg till</button>
            <div class="skills-container mt-3">
                @if (cv.Skills != null)
                {
                    @foreach (var skill in cv.Skills)
                    {
                        <div class="skill-card">
                            <span class="skill-name">@skill</span>
                            <button class="btn-remove" @onclick="() => RemoveSkill(skill)">Ta bort</button>
                        </div>
                    }
                }
            </div>
        </div>

        @if (PdfData != null)
        {
            <div class="pdf-container">
                <iframe class="pdf-viewer" src="@PdfData" style="width: 100%; height: 600px;"></iframe>
                <a class="btn-download" href="@PdfData" download="Resume.pdf">Download PDF</a>
            </div>
        }

        <button class="btn btn-primary btn-generate" @onclick="GenerateCvPdf">Generera CV</button>

    </div>
</div>



@code {
    private string? PdfData { get; set; }
    private List<ReferenceModel> referenceList = new List<ReferenceModel>();
    private List<EducationModel> educationList = new List<EducationModel>();
    private List<ExperienceModel> experienceList = new List<ExperienceModel>();
    private int selectedTemplate = 1;
    private bool UserUploadedImage = false;
    private string newSkill = "";

    private CvModel cv = new CvModel
    {
        Name = "",
        ProfessionalTitle = "",
        Email = "",
        Address = "",
        PostalCode = "",
        City = "",
        PhoneNumber = "",
        AboutMe = "",
        Languages = "",
        Skills = new List<string>()
    };

    protected override async Task OnInitializedAsync()
    {
        await AutofillFromLoggedInUser();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("template", out var templateValue) && int.TryParse(templateValue, out var templateNum))
        {
            selectedTemplate = templateNum;
        }
    }

    private void AddReference()
    {
        if (referenceList.Count < 3)
        {
            referenceList.Add(new ReferenceModel
                {
                    Name = "",
                    Relation = "",
                    PhoneNumber = ""
                });
        }
    }

    private void RemoveReference(ReferenceModel reference)
    {
        referenceList.Remove(reference);
    }

    private void AddSkill()
    {
        if (!string.IsNullOrWhiteSpace(newSkill) && cv.Skills != null && !cv.Skills.Contains(newSkill))
        {
            cv.Skills.Add(newSkill);
            newSkill = "";
        }
    }

    private void RemoveSkill(string skill)
    {
        if (cv.Skills != null)
        {
            cv.Skills.Remove(skill);
        }
    }

    private void AddExperience()
    {
        if (experienceList.Count < 3)
        {
            experienceList.Add(new ExperienceModel
                {
                    JobTitle = "",
                    Company = "",
                    JobDescription = "",
                    StartYear = null,
                    EndYear = null
                });
        }
    }

    private void AddEducation()
    {
        if (educationList.Count < 3)
        {
            educationList.Add(new EducationModel
                {
                    School = "",
                    Degree = "",
                    Specialization = "",
                    StartYear = null,
                    EndYear = null
                });
        }
    }

    private void RemoveEducation(EducationModel education)
    {
        educationList.Remove(education);
    }

    private void RemoveJobExperience(ExperienceModel experiences)
    {
        experienceList.Remove(experiences);
    }

    private bool DoesTemplateSupportProfileImage(int templateId)
    {
        var templatesWithProfileImageSupport = new HashSet<int> { 1, 2, 4 };
        return templatesWithProfileImageSupport.Contains(templateId);
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(stream);
            var imageBytes = stream.ToArray();
            cv.ProfileImage = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageBytes)}";
        }
    }
    private void RemoveProfileImage()
    {
        cv.ProfileImage = null;
    }


    private async Task<string?> GetCurrentUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.Identity?.IsAuthenticated == true
            ? user.FindFirst(ClaimTypes.NameIdentifier)?.Value
            : null;
    }

    private async Task SaveCvToDatabase(byte[] pdfBytes, string fileName)
    {
        using var context = DbContextFactory.CreateDbContext();
        var userId = await GetCurrentUserIdAsync();

        if (userId != null)
        {
            var generatedCv = new GeneratedCv
            {
                UserId = userId,
                CvData = pdfBytes,
                FileName = fileName,
                CreatedAt = DateTime.UtcNow
            };

            context.GeneratedCvs.Add(generatedCv);
            await context.SaveChangesAsync();
        }
    }


    private async Task GenerateCvPdf()
    {
        Action<IDocumentContainer>? templateAction = selectedTemplate switch
        {
            1 => (container) => CreateCvPdfService.Template1(container, cv, educationList, experienceList, referenceList),
            2 => (container) => CreateCvPdfService.Template2(container, cv, educationList, experienceList, referenceList),
            3 => (container) => CreateCvPdfService.Template3(container, cv, educationList, experienceList, referenceList),
            4 => (container) => CreateCvPdfService.Template4(container, cv, educationList, experienceList, referenceList),
            5 => (container) => CreateCvPdfService.Template5(container, cv, educationList, experienceList, referenceList),
            6 => (container) => CreateCvPdfService.Template6(container, cv, educationList, experienceList, referenceList),
            7 => (container) => CreateCvPdfService.Template7(container, cv, educationList, experienceList, referenceList),
            _ => null
        };

        if (templateAction != null)
        {
            var document = Document.Create(container => templateAction(container));

            using var memoryStream = new MemoryStream();
            document.GeneratePdf(memoryStream);
            var pdfBytes = memoryStream.ToArray();

            var fileName = $"Cv_Template_{Guid.NewGuid()}.pdf";

            await SaveCvToDatabase(pdfBytes, fileName);
            PdfData = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";
        }
    }
    private async Task AutofillFromLoggedInUser()
    {
        try
        {
            var userId = await GetCurrentUserIdAsync();
            if (userId == null)
                return;

            var user = await DbContext.Users.FindAsync(userId);
            if (user == null || cv == null)
                return;

            cv.Name = user.FirstName + " " + user.LastName;
            cv.Email = user.Email;
            cv.Address = user.Address;
            cv.PostalCode = user.PostalCode;
            cv.City = user.County;
            cv.PhoneNumber = user.PhoneNumber;
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine("Autofill failed: " + ex.Message);
        }
    }


    private void AddTestData()
    {
        cv = new CvModel
        {
            Name = "Johan Andersson",
            ProfessionalTitle = "Fullstackutvecklare",
            Email = "Johan.andersson@hotmail.com",
            Address = "Tallvägen 12",
            PostalCode = "12345",
            City = "Stockholm",
            PhoneNumber = "070-1234567",
            AboutMe = "Jag är en driven och lösningsorienterad utvecklare med erfarenhet inom både frontend och backend. Jag älskar att skapa moderna, responsiva webbapplikationer och automatisera processer för att förbättra arbetsflöden.",
            Skills = new List<string>
            {
                "C#, .NET Core, ASP.NET",
                "JavaScript, TypeScript, React, Angular",
                "SQL, PostgreSQL, MongoDB",
                "Azure DevOps, Docker, Kubernetes",
                "Microservices & REST API-design",
                "CI/CD, Jenkins, GitHub Actions",
                "Testdriven utveckling (TDD), enhetstester & integrationstester"
             }
        };

        educationList = new List<EducationModel>
        {
            new EducationModel
            {
                School = "KTH - Kungliga Tekniska Högskolan",
                Degree = "Civilingenjör i Datateknik",
                Specialization = "Mjukvaruutveckling & AI",
                StartYear = "2023",
                EndYear = "2025"
            },
            new EducationModel
            {
                School = "Linnéuniversitetet",
                Degree = "Kandidatexamen i Datavetenskap",
                Specialization = "Programvaruteknik",
                StartYear = "2022",
                EndYear = "2023"
            },
            new EducationModel
            {
                School = "Chalmers Tekniska Högskola",
                Degree = "Masterexamen i Programvaruutveckling",
                Specialization = "AI och maskininlärning",
                StartYear = "2021",
                EndYear = "2022"
            }
        };

        experienceList = new List<ExperienceModel>
        {
            new ExperienceModel
            {
                JobTitle = "Fullstackutvecklare",
                Company = "Digital Solutions AB",
                JobDescription = "Utvecklade och underhöll webbapplikationer i .NET och React, samt implementerade CI/CD-pipelines för automatiserad deployment.",
                StartYear = "2019",
                EndYear = "2022"
            },
            new ExperienceModel
            {
                JobTitle = "Systemutvecklare .NET",
                Company = "Tech Solutions AB",
                JobDescription = "Utvecklade och underhöll webbaserade applikationer i .NET och React.",
                StartYear = "2021",
                EndYear = "2023"
            },
            new ExperienceModel
            {
                JobTitle = "Junior Systemutvecklare",
                Company = "Innovate IT",
                JobDescription = "Arbetade med backend-utveckling och databashantering i SQL Server och Entity Framework.",
                StartYear = "2018",
                EndYear = "2021"
            }
        };

        referenceList = new List<ReferenceModel>
        {
            new ReferenceModel
            {
                Name = "Gunilla Persson",
                Relation = "Tidigare arbetsledare på Digital Solutions AB",
                PhoneNumber = "079-8459283"
            },
            new ReferenceModel
            {
                Name = "Tommy Tran",
                Relation = "Tidigare kollega på Digital Solutions AB",
                PhoneNumber = "079-8459283"
            },
            new ReferenceModel
            {
                Name = "Anders Andersson",
                Relation = "Tidigare chef på Tech Solutions AB",
                PhoneNumber = "079-6536786"
            }
        };
    }

}
